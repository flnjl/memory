body
	font-family: sans-serif;


/* la longueur de main est fixée à :
 * nombre de colonnes * taille case + bordures interne.
 * le margin auto permet, associé à la longueur, de centrer le bloc.
 */
main 
	display: block;
	width: 715px;  /* = 7 * 100 + 6*2.5px */
	margin: auto;

h1 
	text-align: center;

/* CSS permet de définir la grille de 4 lignes et 7 colonnes.
 * On y ajoute la valeur de séparation entre les case (2.5px).
 */
#plateau 
	display: grid;
	grid-template-rows: repeat(4, 100px);
	grid-template-columns: repeat(7, 100px);
	grid-gap: 2.5px;
	grid-auto-flow: column;

#affichage_temps 
	margin: 5px auto;
	width: 300px;
	text-align: center;


/* adaptation des dimensions pour les écrans dont
 * la largeur est inférieure ou égale à 800px
 */
@media screen and (max-width: 800px)
	main 
		width: 407.5px;
	
	#plateau 
		grid-template-rows: repeat(7, 100px);
		grid-template-columns: repeat(4, 100px);



.carte 
	background-color: grey;
	border: solid 1px black;


/* quand l'utilisateur passe sur une carte (:hover)
 * le curseur de la souris est de la forme pointeur.
 */
.carte:hover 
	cursor: pointer;


/* on peut donner du style avec les attributs HTML des élements.
 * Les éléments qui ont un attribut data-carte et une classe
 * affichee ou trouvee ont comme image de fond l'image des cartes.
 */
[data-carte].affichee,
[data-carte].trouvee 
	background: url('../img/cards.png');

// utilisation d'une boucle Sass pour le calcul de la position
// de chaque carte dans l'image.
@for $i from 0 through 18
	[data-carte="#{$i}"].affichee,
	[data-carte="#{$i}"].trouvee
		background-position: 0 $i * 100px;

#progress-bar 
	display: inline-block;
	height: 15px;
	width: 200px;

label[for="progress-bar"] 
	font-size: 12px;


